"use strict";(self.webpackChunkafterwind_doc=self.webpackChunkafterwind_doc||[]).push([[671],{7876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=n(5893),o=n(1151);const r={sidebar_position:1,slug:"/"},s="Introduction",a={id:"intro",title:"Introduction",description:"Welcome to the official documentation for Afterwind.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/",draft:!1,unlisted:!1,editUrl:"https://github.com/eedrxs/afterwind/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Getting Started",permalink:"/category/getting-started"}},d={},l=[{value:"What is Afterwind?",id:"what-is-afterwind",level:2},{value:"Main Objectives",id:"main-objectives",level:2}];function c(e){const t={a:"a",admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["Welcome to the official documentation for ",(0,i.jsx)(t.a,{href:"https://github.com/eedrxs/afterwind",children:"Afterwind"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"Afterwind is still under development and isn't usable for production yet."})}),"\n",(0,i.jsx)(t.h2,{id:"what-is-afterwind",children:"What is Afterwind?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Afterwind"})," is a utility library for writing composable Tailwind CSS."]}),"\n",(0,i.jsx)(t.p,{children:"It elevates Tailwind CSS from primitive strings to something you can compose, override, extract, nest, conditionally apply, etc, without needing to resort to messy and unpleasant string manipulation."}),"\n",(0,i.jsx)(t.p,{children:"It builds on top of standard Tailwind CSS to provide a simple yet powerful model that helps you develop flexible and extensible styling for your components."}),"\n",(0,i.jsx)(t.admonition,{title:"What You Should Know",type:"tip",children:(0,i.jsx)(t.p,{children:"Basic understanding and familiarity with Tailwind CSS is a major preresquite as the documentation assumes you already know."})}),"\n",(0,i.jsx)(t.h2,{id:"main-objectives",children:"Main Objectives"}),"\n",(0,i.jsx)(t.p,{children:"The primary goals of this project are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Composability"}),": Provide a simple and intuitive API that allows developers to creating styling for components that can be composed and overridden."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Flexibility"}),": Give developers the ability to create very flexible and dynamic components."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Simplicity"}),": Enable developers to easily work with Tailwind CSS classes without resorting to messy string manipulation."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var i=n(7294);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);